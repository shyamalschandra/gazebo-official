<?xml version="1.0" ?>
<%
  # Joint tree model
  # Follow Bender paper here:
  # http://www.interactive-graphics.de/index.php/research/72-impulse-based-dynamic-simulation-in-linear-time-all
  # Inertial parameters
  # Aluminum 2700 kg/m^3
  density = 2700.0
  # Constants
  layers = 3
  # Constant parameters for the two fixed peg
  Radius = 0.03
  Height = 0.6
  # Constant parameters for each link
  radius = 0.005
  layer_dist = 0.05
  # topmost layer link length0
  length0 = 0.5
  # length ratio between different layers
  ratio = 0.6
  # colors for different layers
  color = ["Red", "Green", "Blue"]
  # vertical yellow link constants:
  mass_vert = density * (Math::PI*(radius**2)*layer_dist)
  ixx_vert = 1/12.0 * mass_vert * ( 3 * radius**2 + layer_dist**2)
  iyy_vert = ixx_vert
  izz_vert = 0.5*mass_vert*radius**2

  def a_to_s(array=[])
    array.map(&:to_s).join(" ")
  end
%>
<sdf version="1.5">
  <world name="default">
    <include>
      <uri>model://ground_plane</uri>
    </include>
    <include>
      <uri>model://sun</uri>
    </include>
<%
# top most layer
pos0 = [0, 0, 0.53]
ori0 = [Math::PI/2.0, 0, 0]
# keep track of the positions of links
positions = []
orientations = []
positions << pos0
orientations << ori0

# layer 0 --- 1
# layer 1 --- 2
# layer 2 --- 4
# layer 3 --- 8
# layer 4 --- 16

def nextLevel(parentPosition, parent_layer, parent_length, layer_dist)
   pos = []
   ori = []
   current_layer = parent_layer + 1
   # 0 layer has 1 link
   if(current_layer%2==1) # y axis
      # body 1
      p1 = [parentPosition[0], parentPosition[1] + parent_length/2.0, parentPosition[2]]
      pos << [p1[0], p1[1], p1[2]-layer_dist]
      ori << [0, Math::PI/2.0, 0]
      # body 2
      p2 = [parentPosition[0], parentPosition[1] - parent_length/2.0, parentPosition[2]]
      pos << [p2[0], p2[1], p2[2]-layer_dist]
      ori << [0, Math::PI/2.0, 0]
   else  # x axis
      # body 1
      p1 = [parentPosition[0]+parent_length/2.0, parentPosition[1], parentPosition[2]]
      pos << [p1[0], p1[1], p1[2]-layer_dist]
      ori << [Math::PI/2.0, 0, 0]
      # body 2
      p2 = [parentPosition[0]-parent_length/2.0, parentPosition[1], parentPosition[2]]
      pos << [p2[0], p2[1], p2[2]-layer_dist]
      ori << [Math::PI/2.0, 0, 0]
   end
   return pos, ori
end

for layer in 1..layers
   # there are 2**(level-1) parents, each parent has 2 kids
   # the parent min_index and max_index
   # layer 0    body 1   parent_index [0, 0]
   # layer 1    body 2   parent_index [0, 0]
   # layer 2    body 4   parent_index [1, 2] 1, 2 as parent to formulate 4 kids/bodies
   # [3, 6] 3, 4, 5, 6 as parent to formulate 8 kids/bodies for level 3
   # layer 3    body 8   parent_index [3, 6]
   # layer 4    body 16  parent_index [7, 14]
   # layer 5    body 32  parent_index [15, 30]

   parent_min_index = 2**(layer-1)-1
   parent_max_index = 2*(2**(layer-1)-1)

   for parent in parent_min_index..parent_max_index
      parentPosition = positions[parent]
      parent_length = length0 * (ratio** (layer-1))
      # parent_layer = layer-1
      pos, ori = nextLevel(parentPosition, layer-1, parent_length, layer_dist)
      # TODO: better way to append matrix in Ruby???
      # each parent has 2 child, so add each child to the positions and orientations for each parent
      positions << pos[0]
      positions << pos[1]
      orientations << ori[0]
      orientations << ori[1]
   end
end
%>

<!--
    <model name="joint_tree_base">
      <static>true</static>
      <link name="peg1">
        <pose> 0 <%= Height %> <%= Height/2.0 %> 0 0 0</pose>
        <self_collide>0</self_collide>
        <visual name="vis_peg">
          <geometry>
            <cylinder>
              <radius><%= Radius %></radius>
              <length><%= Height %></length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Wood</name>
           </script>
          </material>
        </visual>
        <collision name="col_peg">
          <geometry>
            <cylinder>
              <radius><%= Radius %></radius>
              <length><%= Height %></length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
      </link>
      <link name="peg2">
        <pose>0 <%= Height/2.0 %> <%= Height %> <%= Math::PI/2.0 %> 0 0</pose>
        <self_collide>0</self_collide>
        <visual name="vis_peg2">
          <geometry>
            <cylinder>
              <radius><%= Radius %></radius>
              <length><%= Height - 3*radius %></length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Wood</name>
           </script>
          </material>
        </visual>
        <collision name="col_peg2">
          <geometry>
            <cylinder>
              <radius><%= Radius %></radius>
              <length><%= Height - 3*radius %></length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
      </link>
    </model>
-->
    <model name="joint_tree_layers">
      <self_collide>true</self_collide>
<%
  #layer     body    number of body
  #  0        0:0        1
  #  1        1:2        2
  #  2        3:6        4
  #  3        7:14       8
  #  4        15:30      16
  layers.times do |layer|
    body_min_index = 2**layer - 1
    body_max_index = 2*(2**layer -1)
    for body in body_min_index..body_max_index
      linkName = "link_" + body.to_s
      linkVertName = "linkvert_" + body.to_s

      length_curr = length0 * (ratio**layer)
      mass_curr = density * (Math::PI * (radius**2) * length_curr)
      ixx_curr = 1.0/12 * mass_curr*(3*(radius**2) + length_curr**2)
      iyy_curr = ixx_curr
      izz_curr = 0.5*mass_curr*(radius**2)

      pos_xyz = positions[body].clone
      ori_xyz = orientations[body].clone

      pos_link_vert_xyz = pos_xyz.clone
      pos_link_vert_xyz[2] += layer_dist/2.0

      if(layer == 0)
        axisVertParent = [0, 0, 1]
        vertParent = "world"
      else
        axisVertParent = [1, 0, 0]
        vertParent = "link_" + ((body-1)/2).to_s
      end

      if layer.even?
        axisVertChild = [1, 0, 0]
      else
        axisVertChild = [0, 1, 0]
        axisVertParent = [0, 1, 0]
      end
%>
      <%= "<link name=\"#{linkName}\">" %>
        <pose><%= a_to_s(pos_xyz) %> <%= a_to_s(ori_xyz) %></pose>
        <inertial>
          <mass><%= mass_curr %></mass>
          <inertia>
            <ixx><%= ixx_curr %></ixx>
            <iyy><%= iyy_curr %></iyy>
            <izz><%= izz_curr %></izz>
            <ixy>0.0</ixy>
            <ixz>0.0</ixz>
            <iyz>0.0</iyz>
          </inertia>
        </inertial>
        <collision name="collision">
          <geometry>
            <cylinder>
              <radius><%= radius %></radius>
              <length><%= length_curr %></length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
        <visual name="visual">
          <geometry>
            <cylinder>
              <radius><%= radius %></radius>
              <length><%= length_curr %></length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <%= '<name>Gazebo/' + color[layer%3].to_s + '</name>'%>
            </script>
          </material>
        </visual>
      </link>
      <%= "<link name=\"#{linkVertName}\">" %>
        <pose><%= a_to_s(pos_link_vert_xyz) %>  0 0 0 </pose>
        <inertial>
          <mass><%= mass_vert %></mass>
          <inertia>
            <ixx><%= ixx_vert %></ixx>
            <iyy><%= iyy_vert %></iyy>
            <izz><%= izz_vert %></izz>
            <ixy>0.0</ixy>
            <ixz>0.0</ixz>
            <iyz>0.0</iyz>
          </inertia>
        </inertial>
        <collision name="collision">
          <geometry>
            <cylinder>
              <radius><%= radius %></radius>
              <length><%= layer_dist * 0.6 %></length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
        <visual name="visual">
          <geometry>
            <cylinder>
              <radius><%= radius %></radius>
              <length><%= layer_dist %></length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Yellow</name>
            </script>
          </material>
        </visual>
      </link>

      <%=
        if layer == layers-1
          "<!--"
        else
          ""
        end
      %>
        <%= '<joint name="vertChild_' + body.to_s + '" type="ball">' %>
          <parent><%= linkVertName %></parent>
          <child><%= linkName %></child>
          <thread_pitch>-0.1</thread_pitch>
          <axis>
            <xyz><%= a_to_s(axisVertChild) %></xyz>
            <dynamics>
              <damping>0.1</damping>
           </dynamics>
          </axis>
          <physics>
            <ode>
              <cfm_damping>1</cfm_damping>
            </ode>
          </physics>
        </joint>
      <%=
        if layer == layers-1
          "-->"
        else
          ""
        end
      %>
        <%= '<joint name="vertParent_' + body.to_s + '" type="revolute">' %>
          <pose>0 0 <%= layer_dist/2.0 %> 0 0 0</pose>
          <parent><%= vertParent %></parent>
          <child><%= linkVertName %></child>
          <axis>
            <xyz><%= a_to_s(axisVertParent) %></xyz>
            <dynamics>
              <friction>0.01</friction>
            </dynamics>
          </axis>
        </joint>
<%
    end
  end
%>
    </model>
  </world>
</sdf>
