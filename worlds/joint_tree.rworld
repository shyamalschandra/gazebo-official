<?xml version="1.0" ?>
<%
  # Joint tree model
  # Follow Bender paper here: 
  # http://www.interactive-graphics.de/index.php/research/72-impulse-based-dynamic-simulation-in-linear-time-all
  # Inertial parameters
  # Aluminum 2700 kg/m^3
  density = 2700.0
  # Constants 
  layers = 6
  # Constant parameters for the two fixed peg
  Radius = 0.03
  Height = 0.6
  # Constant parameters for each link 
  radius = 0.005
  layer_dist = 0.05 
  # topmost layer link length0
  length0 = 0.5
  # length ratio between different layers 
  ratio = 0.6
  # colors for different layers
  color = ["Red", "Green", "Blue"]
  # vertical yellow link constants: 
  mass_vert = density * (Math::PI*(radius**2)*layer_dist)
  ixx_vert = 1/12.0 * mass_vert * ( 3 * radius**2 + layer_dist**2)
  iyy_vert = ixx_vert 
  izz_vert = 0.5*mass_vert*radius**2
%>
<sdf version="1.5">
  <world name="default">
    <include>
      <uri>model://ground_plane</uri>
    </include>
    <include>
      <uri>model://sun</uri>
    </include>
<%
# top most layer
pose0 = [0, 0, 0.53]
orit0 = [Math::PI/2.0, 0, 0]
# keep track of the positions of links
positions = []
orientations = []
positions << pose0
orientations << orit0 

# layer 0 --- 1
# layer 1 --- 2 
# layer 2 --- 4 
# layer 3 --- 8
# layer 4 --- 16 

def nextLevel(parent_pose, parent_layer, parent_length, layer_dist)
   pos = []
   orit = []
   current_layer = parent_layer + 1
   # 0 layer has 1 link
   if(current_layer%2==1) # y axis
      # body 1 
      p1 = [parent_pose[0], parent_pose[1] + parent_length/2.0, parent_pose[2]]
      pos << [p1[0], p1[1], p1[2]-layer_dist]
      orit << [0, Math::PI/2.0, 0]
      # body 2
      p2 = [parent_pose[0], parent_pose[1] - parent_length/2.0, parent_pose[2]]
      pos << [p2[0], p2[1], p2[2]-layer_dist]
      orit << [0, Math::PI/2.0, 0]
   else  # x axis
      # body 1 
      p1 = [parent_pose[0]+parent_length/2.0, parent_pose[1], parent_pose[2]]
      pos << [p1[0], p1[1], p1[2]-layer_dist]
      orit << [Math::PI/2.0, 0, 0]
      # body 2
      p2 = [parent_pose[0]-parent_length/2.0, parent_pose[1], parent_pose[2]]
      pos << [p2[0], p2[1], p2[2]-layer_dist]
      orit << [Math::PI/2.0, 0, 0]
   end
   return pos, orit
end

for layer in 1..layers
   # there are 2**(level-1) parents, each parent has 2 kids 
   # the parent min_index and max_index
   # layer 0    body 1   parent_index [0, 0]
   # layer 1    body 2   parent_index [0, 0]
   # layer 2    body 4   parent_index [1, 2] 1, 2 as parent to formulate 4 kids/bodies
   # [3, 6] 3, 4, 5, 6 as parent to formulate 8 kids/bodies for level 3
   # layer 3    body 8   parent_index [3, 6] 
   # layer 4    body 16  parent_index [7, 14]
   # layer 5    body 32  parent_index [15, 30]

   parent_min_index = 2**(layer-1)-1
   parent_max_index = 2*(2**(layer-1)-1)

   for parent in parent_min_index..parent_max_index
      parent_pose = positions[parent]
      parent_length = length0 * (ratio** (layer-1))
      # parent_layer = layer-1 
      pos, orit = nextLevel(parent_pose, layer-1, parent_length, layer_dist)
      # TODO: better way to append matrix in Ruby???
      # each parent has 2 child, so add each child to the positions and orientations for each parent
      positions << pos[0]
      positions << pos[1]
      orientations << orit[0]
      orientations << orit[1]
   end
end
%>

    <model name="peg1">
      <static>true</static>
      <link name="link">
        <pose> 0 0.6 0.3 0 0 0</pose>
        <self_collide>0</self_collide>
        <visual name="vis_peg">
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius>0.03</radius>
              <length>0.6</length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Wood</name>
           </script>
          </material>
        </visual>
        <collision name="col_peg">
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius>0.03</radius>
              <length>0.6</length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
      </link>
    </model>

    <model name="peg2">
      <static>true</static>
      <link name="link">
        <pose>0 0.3 0.6 <%= Math::PI/2.0 %> 0 0</pose>
        <self_collide>0</self_collide>
        <visual name="vis_peg2">
          <pose>0.0 0.0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius>0.03</radius>
              <length>0.6</length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Wood</name>
           </script>
          </material>
        </visual>
        <collision name="col_peg2">
          <pose>0.0 0.0 0.0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius>0.03</radius>
              <length>0.6</length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
      </link>
    </model>
<% 
  for layer in 0..layers
%>
<%= '<model name="barlayer_' + layer.to_s + '">' %>
     <% 
        #layer     body    number of body 
        #  0        0:0        1
        #  1        1:2        2 
        #  2        3:6        4
        #  3        7:14       8
        #  4        15:30      16
        body_min_index = 2**layer - 1
        body_max_index = 2*(2**layer -1)
        for body in body_min_index..body_max_index
           length_curr = length0 * (ratio**layer)
           mass_curr = density * (Math::PI * (radius**2) * length_curr)
           ixx_curr = 1.0/12 * mass_curr*(3*(radius**2) + length_curr**2)
           iyy_curr = ixx_curr
           izz_curr = 0.5*mass_curr*(radius**2)

           pos_x = positions[body][0]
           pos_y = positions[body][1]
           pos_z = positions[body][2]
           orit_x = orientations[body][0] 
           orit_y = orientations[body][1] 
           orit_z = orientations[body][2]
     %>
     <%= '<link name="link_' + body.to_s + '">' %>
         <pose><%= pos_x %> <%= pos_y %> <%= pos_z %> <%= orit_x %> <%= orit_y %> <%= orit_z %> </pose>  
        <inertial>
          <mass><%= mass_curr %></mass>
          <inertia>
            <ixx><%= ixx_curr %></ixx>
            <iyy><%= iyy_curr %></iyy>
            <izz><%= izz_curr %></izz>
            <ixy>0.0</ixy>
            <ixz>0.0</ixz>
            <iyz>0.0</iyz>
          </inertia>
        </inertial>
        <collision name="collision">
         <pose>0 0 0 0 0 0</pose>  
          <geometry>
            <cylinder>
              <radius><%= radius %></radius>
              <length><%= length_curr %></length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
        <visual name="visual">
          <pose> 0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius><%= radius %></radius>
              <length><%= length_curr %></length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <%= '<name>Gazebo/' + color[layer%3].to_s + '</name>'%>
            </script>
          </material>
        </visual>
      </link>
      <%= '<link name="linkvert_' + body.to_s + '">' %>
          <pose><%= pos_x %> <%= pos_y %> <%= pos_z + layer_dist/2.0 %>  0 0 0 </pose>  
         <inertial>
           <mass><%= mass_vert %></mass>
          <inertia>
            <ixx><%= ixx_vert %></ixx>
            <iyy><%= iyy_vert %></iyy>
            <izz><%= izz_vert %></izz>
            <ixy>0.0</ixy>
            <ixz>0.0</ixz>
            <iyz>0.0</iyz>
          </inertia>
        </inertial>
        <collision name="collision">
         <pose>0 0 0 0 0 0</pose>  
          <geometry>
            <cylinder>
              <radius><%= radius %></radius>
              <length><%= layer_dist%></length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
        <visual name="visual">
          <pose> 0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius><%= radius %></radius>
              <length><%= layer_dist%></length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Yellow</name>
            </script>
          </material>
        </visual>
      </link>

      <%= '<joint name="vertChild_' + body.to_s + '" type="ball">' %>
          <pose><%= pos_x %> <%= pos_y %> <%= pos_z %> </pose>  
          <parent><%='linkvert_' + body.to_s%></parent>
          <child><%='link_' + body.to_s %></child>
          <thread_pitch>-0.1</thread_pitch>
          <axis>
            <xyz>0 0 1</xyz>
            <limit>
              <upper>1.7</upper>
              <lower>-1.7</lower>
              <stiffness>1e6</stiffness>
              <dissipation>1.0</dissipation>
            </limit>
            <dynamics>
              <damping>0.1</damping>
           </dynamics>
          </axis>
          <physics>
            <ode>
                <cfm_damping>1</cfm_damping>
           </ode>
         </physics>
       </joint>
      <%
        if(layer == 0) 
      %>
        <%= '<joint name="vertParent_' + body.to_s + '" type="revolute">' %>
          <pose><%= pos_x %> <%= pos_y %> <%= pos_z + layer_dist%> </pose>  
          <parent>peg2</parent>
          <child><%='linkvert_' + body.to_s %></child>
          <axis>
            <xyz>0 0 1</xyz>
            <limit>
              <upper>0</upper>
              <lower>0</lower>
            </limit>
          </axis>
        </joint>
      <%
       else
      %>
        <%= '<joint name="vertParent_' + body.to_s + '" type="revolute">' %>
          <pose><%= pos_x %> <%= pos_y %> <%= pos_z + layer_dist%> </pose>  
          <parent><%='link_' + ((body-1)/2).to_s %></parent>
          <child><%='linkvert_' + body.to_s %></child>
          <axis>
            <xyz>1 0 0</xyz>
            <limit>
              <upper>0</upper>
              <lower>0</lower>
            </limit>
          </axis>
        </joint>
      <%
        end
      %>
    <%
     end
    %>
    </model>
<%
 end
%>

  </world>
</sdf>
