<?xml version="1.0" ?>
<%
  # Star of Hanoi demo
  # Make stars with extruded polylines

  # Inertial parameters
  # Aluminum 2700 kg/m^3
  density = 2700.0

  # Constant parameters for each star 
  radius_outer0 = 0.05
  star_ratio = 0.75
  height = 0.02
  star_number = 6
  star_point_number = 5
  radius_hole = 0.02
  points_hole = 10
  color = ["Red", "Orange", "Yellow", "Green", "Blue", "Purple"]
  
%>
<sdf version="1.5">
  <world name="default">
    <include>
      <uri>model://ground_plane</uri>
    </include>
    <include>
      <uri>model://sun</uri>
    </include>
<%
  # Star axis of symmetry: Z
  star_number.times do |j|
    radius_outer = radius_outer0*(star_number - j)
    radius_inner = star_ratio*radius_outer
    # offset between each star
    angle0 = (j+1)*Math::PI/12.0;

    # approximate the inertia for star 
    volume = Math::PI * (radius_outer**2 - radius_inner**2) * height
    mass = density * volume
    ixx = 1.0 / 12 * mass * (3*(radius_inner**2 + radius_outer**2) + height**2)
    iyy = ixx
    izz = 0.5 * mass * (radius_inner**2 + radius_outer**2)

    def star_points_s(outer_radius, inner_radius, angle0, points=5)
      polyline = []
      points.times do |i|
        inner_angle = 2*Math::PI * i / points.to_f + angle0;
        # outer_angle(i) = (inner_angle(i) + inner_angle(i+1)) / 2.0
        outer_angle = Math::PI * (2*i+1) / points.to_f + angle0;
        polyline << [inner_radius*Math.cos(inner_angle), inner_radius*Math.sin(inner_angle)]
        polyline << [outer_radius*Math.cos(outer_angle), outer_radius*Math.sin(outer_angle)]
      end
      polyline << [inner_radius*Math.cos(angle0), inner_radius*Math.sin(angle0)]
      
      points_s = ""
      polyline.each do |p| 
        points_s += "<point>" \
                 + p[0].to_s + " " + p[1].to_s \
                 + "</point>\n"
      end
      points_s 
    end

    def hole_points_s(hole_radius, hole_points=10)
      polyline = []
      hole_points.times do |i|
        angle = 2*Math::PI * i / hole_points.to_f;
        polyline << [hole_radius*Math.cos(angle), hole_radius*Math.sin(angle)]
      end
      
      points_s = ""
      polyline.each do |p| 
        points_s += "<point>" \
                 + p[0].to_s + " " + p[1].to_s \
                 + "</point>\n"
      end
      points_s 
    end

    geometry_s = "<geometry>\n"  \
               + "<polyline>\n"  \
               + star_points_s(radius_outer, radius_inner, angle0, star_point_number) \
               + "<height>" + height.to_s + "</height>\n"  \
               + "</polyline>\n" \
               + "<polyline>\n"  \
               + hole_points_s(radius_hole, points_hole) \
               + "<height>" + height.to_s + "</height>\n"  \
               + "</polyline>\n" \
               + "</geometry>\n"
%>
    <%= '<model name="star_' + radius_outer.to_s + '">' %>
      <pose>0 0 <%= height * (j + 0.5) %>  0 0 0</pose>
      <link name="link">
        <inertial>
          <mass><%= mass %></mass>
          <inertia>
            <ixx><%= ixx %></ixx>
            <iyy><%= iyy %></iyy>
            <izz><%= izz %></izz>
            <ixy>0.0</ixy>
            <ixz>0.0</ixz>
            <iyz>0.0</iyz>
          </inertia>
        </inertial>
        <collision name="collision">
          <%= geometry_s %>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
        <visual name="visual">
          <%= geometry_s %>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <%= '<name>Gazebo/' + color[j%star_number].to_s + '</name>'%>
            </script>
          </material>
        </visual>
      </link>
    </model>
<%
    end
%>
    <model name="peg1">
      <static>true</static>
      <link name="link">
        <pose> 0 0 0.3 0 0 0</pose>
        <self_collide>0</self_collide>
        <visual name="vis_peg">
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius>0.01</radius>
              <length>0.6</length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Wood</name>
           </script>
          </material>
        </visual>
        <collision name="col_peg">
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius>0.01</radius>
              <length>0.6</length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
      </link>
    </model>

    <model name="peg2">
      <static>true</static>
      <link name="link">
        <pose>0.6 0.2 0.3 0 0 0</pose>
        <self_collide>0</self_collide>
        <visual name="vis_peg2">
          <pose>0.0 0.0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius>0.01</radius>
              <length>0.6</length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Wood</name>
           </script>
          </material>
        </visual>
        <collision name="col_peg2">
          <pose>0.0 0.0 0.0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius>0.01</radius>
              <length>0.6</length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
      </link>
    </model>

    <model name="peg3">
      <static>true</static>
      <link name="link">
        <pose>1.2 0.4 0.3 0 0 0</pose>
        <self_collide>0</self_collide>
        <visual name="vis_peg3">
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius>0.01</radius>
              <length>0.6</length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Wood</name>
           </script>
          </material>
        </visual>
        <collision name="col_peg3">
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius>0.01</radius>
              <length>0.6</length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
      </link>
    </model>
  </world>
</sdf>
