/* Auto-generated by genmsg_cpp for file /home/osrf/nkoenig/drcsim_grasp_force_analysis/ros/atlas_msgs/msg/AtlasState.msg */
#ifndef ATLAS_MSGS_MESSAGE_ATLASSTATE_H
#define ATLAS_MSGS_MESSAGE_ATLASSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Quaternion.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Wrench.h"
#include "geometry_msgs/Wrench.h"
#include "geometry_msgs/Wrench.h"
#include "geometry_msgs/Wrench.h"

namespace atlas_msgs
{
template <class ContainerAllocator>
struct AtlasState_ {
  typedef AtlasState_<ContainerAllocator> Type;

  AtlasState_()
  : header()
  , position()
  , velocity()
  , effort()
  , kp_position()
  , ki_position()
  , kd_position()
  , kp_velocity()
  , i_effort_min()
  , i_effort_max()
  , k_effort()
  , orientation()
  , angular_velocity()
  , linear_acceleration()
  , l_foot()
  , r_foot()
  , l_hand()
  , r_hand()
  {
  }

  AtlasState_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , position(_alloc)
  , velocity(_alloc)
  , effort(_alloc)
  , kp_position(_alloc)
  , ki_position(_alloc)
  , kd_position(_alloc)
  , kp_velocity(_alloc)
  , i_effort_min(_alloc)
  , i_effort_max(_alloc)
  , k_effort(_alloc)
  , orientation(_alloc)
  , angular_velocity(_alloc)
  , linear_acceleration(_alloc)
  , l_foot(_alloc)
  , r_foot(_alloc)
  , l_hand(_alloc)
  , r_hand(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _position_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  position;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _velocity_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  velocity;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _effort_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  effort;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _kp_position_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  kp_position;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ki_position_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  ki_position;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _kd_position_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  kd_position;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _kp_velocity_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  kp_velocity;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _i_effort_min_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  i_effort_min;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _i_effort_max_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  i_effort_max;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _k_effort_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  k_effort;

  typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
   ::geometry_msgs::Quaternion_<ContainerAllocator>  orientation;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_velocity_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  angular_velocity;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  linear_acceleration;

  typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _l_foot_type;
   ::geometry_msgs::Wrench_<ContainerAllocator>  l_foot;

  typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _r_foot_type;
   ::geometry_msgs::Wrench_<ContainerAllocator>  r_foot;

  typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _l_hand_type;
   ::geometry_msgs::Wrench_<ContainerAllocator>  l_hand;

  typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _r_hand_type;
   ::geometry_msgs::Wrench_<ContainerAllocator>  r_hand;

  enum { back_lbz = 0 };
  enum { back_mby = 1 };
  enum { back_ubx = 2 };
  enum { neck_ay = 3 };
  enum { l_leg_uhz = 4 };
  enum { l_leg_mhx = 5 };
  enum { l_leg_lhy = 6 };
  enum { l_leg_kny = 7 };
  enum { l_leg_uay = 8 };
  enum { l_leg_lax = 9 };
  enum { r_leg_uhz = 10 };
  enum { r_leg_mhx = 11 };
  enum { r_leg_lhy = 12 };
  enum { r_leg_kny = 13 };
  enum { r_leg_uay = 14 };
  enum { r_leg_lax = 15 };
  enum { l_arm_usy = 16 };
  enum { l_arm_shx = 17 };
  enum { l_arm_ely = 18 };
  enum { l_arm_elx = 19 };
  enum { l_arm_uwy = 20 };
  enum { l_arm_mwx = 21 };
  enum { r_arm_usy = 22 };
  enum { r_arm_shx = 23 };
  enum { r_arm_ely = 24 };
  enum { r_arm_elx = 25 };
  enum { r_arm_uwy = 26 };
  enum { r_arm_mwx = 27 };

  typedef boost::shared_ptr< ::atlas_msgs::AtlasState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::AtlasState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AtlasState
typedef  ::atlas_msgs::AtlasState_<std::allocator<void> > AtlasState;

typedef boost::shared_ptr< ::atlas_msgs::AtlasState> AtlasStatePtr;
typedef boost::shared_ptr< ::atlas_msgs::AtlasState const> AtlasStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::atlas_msgs::AtlasState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::atlas_msgs::AtlasState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::atlas_msgs::AtlasState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::AtlasState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f401ea8c0dd89918d4fa3a58c57816e6";
  }

  static const char* value(const  ::atlas_msgs::AtlasState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf401ea8c0dd89918ULL;
  static const uint64_t static_value2 = 0xd4fa3a58c57816e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::AtlasState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "atlas_msgs/AtlasState";
  }

  static const char* value(const  ::atlas_msgs::AtlasState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::AtlasState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#\n\
# This message has been carefully constructed to be less\n\
# than 1500 in size when serialized, to accommodate transfer\n\
# UDP.\n\
#\n\
# testing everything a robot needs\n\
Header header\n\
\n\
# Default joint indices used when publishing the\n\
# JointCommands joint_states topic below\n\
# For exmaple, if you subscribe to this message, then\n\
# msg.joint_states.position[atlas_msgs::AtlasStates::back_lbz] gives back\n\
# the position of the back_lbz.\n\
int32 back_lbz  = 0\n\
int32 back_mby  = 1\n\
int32 back_ubx  = 2\n\
int32 neck_ay   = 3\n\
int32 l_leg_uhz = 4\n\
int32 l_leg_mhx = 5\n\
int32 l_leg_lhy = 6\n\
int32 l_leg_kny = 7\n\
int32 l_leg_uay = 8\n\
int32 l_leg_lax = 9\n\
int32 r_leg_uhz = 10\n\
int32 r_leg_mhx = 11\n\
int32 r_leg_lhy = 12\n\
int32 r_leg_kny = 13\n\
int32 r_leg_uay = 14\n\
int32 r_leg_lax = 15\n\
int32 l_arm_usy = 16\n\
int32 l_arm_shx = 17\n\
int32 l_arm_ely = 18\n\
int32 l_arm_elx = 19\n\
int32 l_arm_uwy = 20\n\
int32 l_arm_mwx = 21\n\
int32 r_arm_usy = 22\n\
int32 r_arm_shx = 23\n\
int32 r_arm_ely = 24\n\
int32 r_arm_elx = 25\n\
int32 r_arm_uwy = 26\n\
int32 r_arm_mwx = 27\n\
\n\
# repeating data from osrf_msgs/JointCommands as joint_states\n\
float32[] position\n\
float32[] velocity\n\
float32[] effort\n\
float32[] kp_position\n\
float32[] ki_position\n\
float32[] kd_position\n\
float32[] kp_velocity\n\
float32[] i_effort_min\n\
float32[] i_effort_max\n\
\n\
uint8[] k_effort       # k_effort can be an unsigned int 8value from 0 to 255, \n\
                       # at run time, a double between 0 and 1 is obtained\n\
                       # by dividing by 255.0d.\n\
\n\
\n\
#sensor_msgs/Imu imu \n\
geometry_msgs/Quaternion orientation\n\
geometry_msgs/Vector3 angular_velocity\n\
geometry_msgs/Vector3 linear_acceleration\n\
\n\
#atlas_msgs/ForceTorqueSensors force_torque_sensors\n\
geometry_msgs/Wrench l_foot\n\
geometry_msgs/Wrench r_foot\n\
geometry_msgs/Wrench l_hand\n\
geometry_msgs/Wrench r_hand\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Wrench\n\
# This represents force in free space, seperated into \n\
# it's linear and angular parts.  \n\
Vector3  force\n\
Vector3  torque\n\
\n\
";
  }

  static const char* value(const  ::atlas_msgs::AtlasState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::atlas_msgs::AtlasState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::atlas_msgs::AtlasState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::atlas_msgs::AtlasState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.position);
    stream.next(m.velocity);
    stream.next(m.effort);
    stream.next(m.kp_position);
    stream.next(m.ki_position);
    stream.next(m.kd_position);
    stream.next(m.kp_velocity);
    stream.next(m.i_effort_min);
    stream.next(m.i_effort_max);
    stream.next(m.k_effort);
    stream.next(m.orientation);
    stream.next(m.angular_velocity);
    stream.next(m.linear_acceleration);
    stream.next(m.l_foot);
    stream.next(m.r_foot);
    stream.next(m.l_hand);
    stream.next(m.r_hand);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AtlasState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::AtlasState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::atlas_msgs::AtlasState_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "effort[]" << std::endl;
    for (size_t i = 0; i < v.effort.size(); ++i)
    {
      s << indent << "  effort[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.effort[i]);
    }
    s << indent << "kp_position[]" << std::endl;
    for (size_t i = 0; i < v.kp_position.size(); ++i)
    {
      s << indent << "  kp_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.kp_position[i]);
    }
    s << indent << "ki_position[]" << std::endl;
    for (size_t i = 0; i < v.ki_position.size(); ++i)
    {
      s << indent << "  ki_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ki_position[i]);
    }
    s << indent << "kd_position[]" << std::endl;
    for (size_t i = 0; i < v.kd_position.size(); ++i)
    {
      s << indent << "  kd_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.kd_position[i]);
    }
    s << indent << "kp_velocity[]" << std::endl;
    for (size_t i = 0; i < v.kp_velocity.size(); ++i)
    {
      s << indent << "  kp_velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.kp_velocity[i]);
    }
    s << indent << "i_effort_min[]" << std::endl;
    for (size_t i = 0; i < v.i_effort_min.size(); ++i)
    {
      s << indent << "  i_effort_min[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.i_effort_min[i]);
    }
    s << indent << "i_effort_max[]" << std::endl;
    for (size_t i = 0; i < v.i_effort_max.size(); ++i)
    {
      s << indent << "  i_effort_max[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.i_effort_max[i]);
    }
    s << indent << "k_effort[]" << std::endl;
    for (size_t i = 0; i < v.k_effort.size(); ++i)
    {
      s << indent << "  k_effort[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.k_effort[i]);
    }
    s << indent << "orientation: ";
s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "angular_velocity: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "linear_acceleration: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "l_foot: ";
s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.l_foot);
    s << indent << "r_foot: ";
s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.r_foot);
    s << indent << "l_hand: ";
s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.l_hand);
    s << indent << "r_hand: ";
s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.r_hand);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_ATLASSTATE_H

